" VIM Juanmi Taboada:
" Version: 20230226
" Author: Juanmi Taboada <juanmi@juanmitaboada.com> - http://www.juanmitaboada.com
"
" This version is used on /etc/vim/vimrc.all for general purpose

" Foldmethod
set foldmethod=marker

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

set bs=2		" allow backspacing over everything in insert mode
set ai			" always set autoindenting on
"if has("vms")
 set nobackup		" do not keep a backup file, use versions instead
"else
 " set backup		" keep a backup file
"endif
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set noic		" ignore case

set softtabstop=4
set hardtabs=4
set tabstop=4
set shiftwidth=4
set expandtab
set list
set nu
set lcs=eol:$
" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" Taglist
nnoremap <silent> <F4> :TlistToggle<CR><C-w><Left>

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

 " In text files, always limit the width of text to 78 characters
 autocmd BufRead *.txt set tw=78
 " autocmd BufRead *.py set tw=78

 augroup cprog
  " Remove all cprog autocommands
  au!

  " When starting to edit a file:
  "   For C and C++ files set formatting of comments and set C-indenting on.
  "   For other files switch it off.
  "   Don't change the order, it's important that the line with * comes first.
  autocmd FileType *      set formatoptions=tcql nocindent comments&
  autocmd FileType c,cpp  set formatoptions=croql cindent comments=sr:/*,mb:*,el:*/,://
 augroup END

 augroup gzip
  " Remove all gzip autocommands
  au!

  " Enable editing of gzipped files
  " set binary mode before reading the file
  " use "gzip -d", gunzip isn't always available
  autocmd BufReadPre,FileReadPre	*.gz,*.bz2 set bin
  autocmd BufReadPost,FileReadPost	*.gz call GZIP_read("gzip -d")
  autocmd BufReadPost,FileReadPost	*.bz2 call GZIP_read("bzip2 -d")
  autocmd BufWritePost,FileWritePost	*.gz call GZIP_write("gzip")
  autocmd BufWritePost,FileWritePost	*.bz2 call GZIP_write("bzip2")
  autocmd FileAppendPre			*.gz call GZIP_appre("gzip -d")
  autocmd FileAppendPre			*.bz2 call GZIP_appre("bzip2 -d")
  autocmd FileAppendPost		*.gz call GZIP_write("gzip")
  autocmd FileAppendPost		*.bz2 call GZIP_write("bzip2")

  " After reading compressed file: Uncompress text in buffer with "cmd"
  fun! GZIP_read(cmd)
    " set 'cmdheight' to two, to avoid the hit-return prompt
    let ch_save = &ch
    set ch=3
    " when filtering the whole buffer, it will become empty
    let empty = line("'[") == 1 && line("']") == line("$")
    let tmp = tempname()
    let tmpe = tmp . "." . expand("<afile>:e")
    " write the just read lines to a temp file "'[,']w tmp.gz"
    execute "'[,']w " . tmpe
    " uncompress the temp file: call system("gzip -d tmp.gz")
    call system(a:cmd . " " . tmpe)
    " delete the compressed lines
    '[,']d
    " read in the uncompressed lines "'[-1r tmp"
    set nobin
    execute "'[-1r " . tmp
    " if buffer became empty, delete trailing blank line
    if empty
      normal Gdd''
    endif
    " delete the temp file
    call delete(tmp)
    let &ch = ch_save
    " When uncompressed the whole buffer, do autocommands
    if empty
      execute ":doautocmd BufReadPost " . expand("%:r")
    endif
  endfun

  " After writing compressed file: Compress written file with "cmd"
  fun! GZIP_write(cmd)
    if rename(expand("<afile>"), expand("<afile>:r")) == 0
      call system(a:cmd . " " . expand("<afile>:r"))
    endif
  endfun

  " Before appending to compressed file: Uncompress file with "cmd"
  fun! GZIP_appre(cmd)
    call system(a:cmd . " " . expand("<afile>"))
    call rename(expand("<afile>:r"), expand("<afile>"))
  endfun

 augroup END

 " This is disabled, because it changes the jumplist.  Can't use CTRL-O to go
 " back to positions in previous files more than once.
 if 0
  " When editing a file, always jump to the last cursor position.
  " This must be after the uncompress commands.
   autocmd BufReadPost * if line("'\"") && line("'\"") <= line("$") | exe "normal `\"" | endif
 endif

endif " has("autocmd")

"set guifont=-dec-terminal-medium-r-normal-*-*-140-*-*-c-*-iso8859-1
set guifont=-sony-fixed-medium-r-normal-*-*-160-*-*-c-*-jisx0201.1076-0
"highlight Normal guibg=white
highlight Normal guibg=black guifg=gray
set lcs=extends:$,tab:/.,eol:$
set showmatch

" Own maps "

    " - Help - "
        map <F2> :!man <cword><cr>

    " - CTAGS - "
        map <cr> <c-]>
        map <bs> <c-t>
        map <F3> :!echo -n "Updating CTAGS..."; ctags -R *; echo "Done"<CR>
        imap <F3> <C-O>:!echo -n "Updating CTAGS..."; ctags -R *; echo "Done"<CR>

    " - For managing Tabs - "
    "   Right: :tabn<CR>
    "   Left:  :tabp<CR>
    "   Up:    :tabnew<CR>
    "   Down:  :tabnew<CR>
    
    " - For managing Panels - Change panel: AltGr+Arrow & Scale panel: Shift+Alt+Arrow"
        " map  <Esc>OA <C-w><Up><CR>
        " imap <Esc>OA <Esc><C-w><Up><CR>
        " map  <Esc>OD <C-w><Left><CR>
        " imap <Esc>OD <Esc><C-w><Left><CR>
        " map  <Esc>OB <C-w><Down><CR>
        " imap <Esc>OB <Esc><C-w><Down><CR>
        " map  <Esc>OC <C-w><Right><CR>
        " imap <Esc>OC <Esc><C-w><Right><CR>
        
        map  <AS-Left> <C-w><<CR>
        imap <AS-Left> <Esc><C-w><<CR>
        map  <AS-Right> <C-w>><CR>
        imap <AS-Right> <Esc><C-w>><CR>
        map  <AS-Up> <C-w>-<CR>
        imap <AS-Up> <Esc><C-w>-<CR>
        map  <AS-Down> <C-w>+<CR>
        imap <AS-Down> <Esc><C-w>+<CR>
        
    " - Tab character - "
        ab usetab :set noet ci pi sts=0 sw=4 ts=4
    
    " - Mouse wheel will not work - "
        map <mouseup> <nop>
        map <mousedown> <nop> 

filetype on
filetype plugin on
filetype plugin indent on
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete

" Python
"autocmd FileType python compiler pylint
let g:pydiction_location = '/etc/vim/pydiction/complete-dict'
autocmd FileType python set omnifunc=pythoncomplete#Complete

" Snippet
let g:snippetsEmu_key = "<S-Tab>"
